
from flask import Flask, render_template, request, redirect, url_for, flash, session, g
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET", "secret123")
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///campus_lost_and_found.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(200), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    status = db.Column(db.String(20), nullable=False)  # 'lost' or 'found'
    owner_email = db.Column(db.String(200), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

# Create DB if not exists
@app.before_first_request
def create_tables():
    db.create_all()

# Helpers
def current_user():
    user_email = session.get('user')
    if not user_email:
        return None
    return User.query.filter_by(email=user_email).first()

# Routes - Authentication
@app.route('/')
def login_page():
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def login():
    email = request.form.get('email','').strip().lower()
    password = request.form.get('password','')
    user = User.query.filter_by(email=email).first()
    if user and check_password_hash(user.password_hash, password):
        session['user'] = user.email
        flash("Logged in successfully.", "success")
        return redirect(url_for('dashboard'))
    else:
        flash("Invalid email or password.", "error")
        return redirect(url_for('login_page'))

@app.route('/register')
def register_page():
    return render_template('register.html')

@app.route('/register_user', methods=['POST'])
def register_user():
    email = request.form.get('email','').strip().lower()
    password = request.form.get('password','')
    if not email or not password:
        flash("Email and password are required.", "error")
        return redirect(url_for('register_page'))
    if User.query.filter_by(email=email).first():
        flash("Account already exists.", "error")
        return redirect(url_for('register_page'))
    user = User(email=email, password_hash=generate_password_hash(password))
    db.session.add(user)
    db.session.commit()
    flash("Registration successful! You can now log in.", "success")
    return redirect(url_for('login_page'))

@app.route('/logout')
def logout():
    session.pop('user', None)
    flash("Logged out successfully.", "info")
    return redirect(url_for('login_page'))

# Dashboard & Items (CRUD)
@app.route('/dashboard')
def dashboard():
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    items = Item.query.order_by(Item.created_at.desc()).all()
    return render_template('dashboard.html', items=items, user=current_user())

@app.route('/item/create', methods=['GET','POST'])
def create_item():
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    if request.method == 'POST':
        title = request.form.get('title','').strip()
        description = request.form.get('description','').strip()
        status = request.form.get('status','lost')
        owner_email = current_user().email
        if not title:
            flash("Title is required.", "error")
            return redirect(url_for('create_item'))
        item = Item(title=title, description=description, status=status, owner_email=owner_email)
        db.session.add(item)
        db.session.commit()
        flash("Item created.", "success")
        return redirect(url_for('dashboard'))
    return render_template('create_item.html')

@app.route('/item/<int:item_id>')
def view_item(item_id):
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    item = Item.query.get_or_404(item_id)
    return render_template('view_item.html', item=item)

@app.route('/item/<int:item_id>/edit', methods=['GET','POST'])
def edit_item(item_id):
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    item = Item.query.get_or_404(item_id)
    if request.method == 'POST':
        item.title = request.form.get('title','').strip()
        item.description = request.form.get('description','').strip()
        item.status = request.form.get('status','lost')
        db.session.commit()
        flash("Item updated.", "success")
        return redirect(url_for('view_item', item_id=item.id))
    return render_template('edit_item.html', item=item)

@app.route('/item/<int:item_id>/delete', methods=['POST'])
def delete_item(item_id):
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    item = Item.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    flash("Item deleted.", "info")
    return redirect(url_for('dashboard'))

@app.route('/search')
def search():
    if not current_user():
        flash("Please log in first.", "error")
        return redirect(url_for('login_page'))
    q = request.args.get('q','').strip()
    results = []
    if q:
        results = Item.query.filter(
            (Item.title.ilike(f"%{q}%")) | (Item.description.ilike(f"%{q}%"))
        ).order_by(Item.created_at.desc()).all()
    return render_template('search.html', query=q, results=results)

if __name__ == '__main__':
    app.run(debug=True)
